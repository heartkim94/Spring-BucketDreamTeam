<?xml version="1.0" encoding="UTF-8"?>
<!-- mybatis map 선언 표시 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
              "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<mapper namespace="com.pknu.project.group.dao.GroupDao">
	<select id="isAdminMember" parameterType="int" resultType="boolean">
		select	count(*)
		from	groups g
		join	members m
		on		g.groupNum = m.groupNum
		where	g.groupNum = -1
				and userNum = #{userNum};
	</select>
	<select id="getMyGroupList" parameterType="String" resultType="group">
		select	g.*, ifnull(cnt, 0) as memberCount
		from	groups g
				left join	members m	on g.groupNum = m.groupNum
				left join	users u		on m.userNum = u.userNum
				left join 	(select	groupNum, count(groupNum) as cnt
		           			from	members
		            		group by groupNum) c
		            					on g.groupNum = c.groupNum
		where 	u.id = #{id};
	</select>
	<select id="getGroups" resultType="group">
		SELECT g.groupNum, g.groupName, g.profileImg, memberCount
		FROM groups g 
			JOIN members m ON g.groupNum = m.groupNum 
			JOIN (	SELECT groupNum, count(groupNum) as memberCount 
		            FROM members 
					GROUP BY groupNum) cnt ON g.groupNum = cnt.groupNum 
		WHERE g.groupNum != -1
		GROUP BY groupNum
	</select>
	<select id="getGroup" parameterType="int" resultType="group">
		SELECT g.*, u.id as groupOwnerId 
		FROM Groups g, users u
		WHERE g.groupNum=#{groupNum} AND g.groupOwner=u.userNum
	</select>
	<select id="memberList" parameterType="int" resultType="String">
		SELECT u.id 
		FROM users u, (SELECT userNum FROM members WHERE groupNum=#{groupNum}) uNum 
		WHERE u.userNum=uNum.userNum
	</select>
	<select id="getCategory" resultType="category">
		SELECT c2.*
		FROM Categorys c1, categorys c2
		WHERE c1.parentNum=0
			  and (c1.catNum=c2.parentNum or c1.catNum=c2.catNum)
			  and c1.catNum!=-1
		ORDER BY c1.catNum, c2.parentNum;
	</select>
	<update id="newGroup" parameterType="group"
			useGeneratedKeys="true" keyColumn="groupNum" keyProperty="groupNum">
		INSERT INTO Groups(groupName, groupOwner, catNum)
		VALUES(#{groupName},
			   (SELECT	userNum
			   FROM		Users
			   WHERE	id=#{groupOwnerId}),
			   #{catNum}
		);
		INSERT INTO Members VALUES(
			last_insert_id(),
			(SELECT	userNum
			   FROM		Users
			   WHERE	id=#{groupOwnerId})
		);
	</update>
	
	<insert id="insertProfileImg" parameterType="file">
		INSERT INTO fileList VALUES(0, #{storedFname}, #{fileLength});
		INSERT INTO profileOf VALUES(last_insert_id(), #{groupNum});
		UPDATE groups SET profileImg=#{storedFname} WHERE groupNum=#{groupNum};
	</insert>
	
	<update id="setDefaultProfile" parameterType="file">
		UPDATE groups SET profileImg=#{storedFname} WHERE groupNum=#{groupNum};
	</update>
	
	<delete id="deleteGroup" parameterType="int">
		DELETE g, f FROM groups g
		LEFT JOIN ProfileOf po ON po.groupNum = g.groupNum
		LEFT JOIN FileList f ON f.fileNum = po.fileNum
		WHERE g.groupNum=#{groupNum}
	</delete>
	
	<insert id="joinGroup" parameterType="HashMap">
		INSERT INTO members 
		VALUES(#{groupNum}, (SELECT userNum FROM users u WHERE u.id=#{id}))
	</insert>
	
	<delete id="leaveGroup" parameterType="HashMap">
		DELETE FROM members 
		WHERE groupNum=#{groupNum} AND userNum=(SELECT userNum FROM users u WHERE u.id=#{id})
	</delete>
</mapper>